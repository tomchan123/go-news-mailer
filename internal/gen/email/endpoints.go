// Code generated by goa v3.13.1, DO NOT EDIT.
//
// email endpoints
//
// Command:
// $ goa gen github.com/tomchan123/go-news-mailer/internal/design --output
// ./internal

package email

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "email" service endpoints.
type Endpoints struct {
	SendOneEmail goa.Endpoint
}

// NewEndpoints wraps the methods of the "email" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		SendOneEmail: NewSendOneEmailEndpoint(s),
	}
}

// Use applies the given middleware to all the "email" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SendOneEmail = m(e.SendOneEmail)
}

// NewSendOneEmailEndpoint returns an endpoint function that calls the method
// "sendOneEmail" of service "email".
func NewSendOneEmailEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SubscriptionSendOneEmailPayload)
		return nil, s.SendOneEmail(ctx, p)
	}
}

// Code generated by goa v3.13.1, DO NOT EDIT.
//
// subscription service
//
// Command:
// $ goa gen github.com/tomchan123/go-news-mailer/internal/design --output
// ./internal/gen

package subscription

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The subscription service provides ways to manage news subscription
type Service interface {
	// Get all subscriptions
	GetAll(context.Context) (res []*Subscription, err error)
	// Get a subscription by UID
	GetOneByUID(context.Context, string) (res *Subscription, err error)
	// Delete a subscription by UID
	DeleteOneByUID(context.Context, string) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "subscription"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"getAll", "getOneByUID", "deleteOneByUID"}

// A subscription with the same UID
type Subscription struct {
	// Unique identifier of subcription
	UID string
	// Subscribed email
	Email string
	// Name of the subscriber
	Name *string
	// Datetime when the subscription was made
	Since *string
}

// MakeSubscriptionNotFound builds a goa.ServiceError from an error.
func MakeSubscriptionNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "SubscriptionNotFound", false, false, false)
}

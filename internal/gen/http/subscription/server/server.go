// Code generated by goa v3.13.1, DO NOT EDIT.
//
// subscription HTTP server
//
// Command:
// $ goa gen github.com/tomchan123/go-news-mailer/internal/design --output
// ./internal

package server

import (
	"context"
	"net/http"

	subscription "github.com/tomchan123/go-news-mailer/internal/gen/subscription"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the subscription service endpoint HTTP handlers.
type Server struct {
	Mounts         []*MountPoint
	GetAll         http.Handler
	GetOneByUID    http.Handler
	DeleteOneByUID http.Handler
	CreateOne      http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the subscription service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *subscription.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetAll", "GET", "/api/subscriptions"},
			{"GetOneByUID", "GET", "/api/subscriptions/{uid}"},
			{"DeleteOneByUID", "DELETE", "/api/subscriptions/{uid}"},
			{"CreateOne", "POST", "/api/subscriptions"},
		},
		GetAll:         NewGetAllHandler(e.GetAll, mux, decoder, encoder, errhandler, formatter),
		GetOneByUID:    NewGetOneByUIDHandler(e.GetOneByUID, mux, decoder, encoder, errhandler, formatter),
		DeleteOneByUID: NewDeleteOneByUIDHandler(e.DeleteOneByUID, mux, decoder, encoder, errhandler, formatter),
		CreateOne:      NewCreateOneHandler(e.CreateOne, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "subscription" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetAll = m(s.GetAll)
	s.GetOneByUID = m(s.GetOneByUID)
	s.DeleteOneByUID = m(s.DeleteOneByUID)
	s.CreateOne = m(s.CreateOne)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return subscription.MethodNames[:] }

// Mount configures the mux to serve the subscription endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetAllHandler(mux, h.GetAll)
	MountGetOneByUIDHandler(mux, h.GetOneByUID)
	MountDeleteOneByUIDHandler(mux, h.DeleteOneByUID)
	MountCreateOneHandler(mux, h.CreateOne)
}

// Mount configures the mux to serve the subscription endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetAllHandler configures the mux to serve the "subscription" service
// "getAll" endpoint.
func MountGetAllHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/subscriptions", f)
}

// NewGetAllHandler creates a HTTP handler which loads the HTTP request and
// calls the "subscription" service "getAll" endpoint.
func NewGetAllHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetAllResponse(encoder)
		encodeError    = EncodeGetAllError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAll")
		ctx = context.WithValue(ctx, goa.ServiceKey, "subscription")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetOneByUIDHandler configures the mux to serve the "subscription"
// service "getOneByUID" endpoint.
func MountGetOneByUIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/subscriptions/{uid}", f)
}

// NewGetOneByUIDHandler creates a HTTP handler which loads the HTTP request
// and calls the "subscription" service "getOneByUID" endpoint.
func NewGetOneByUIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetOneByUIDRequest(mux, decoder)
		encodeResponse = EncodeGetOneByUIDResponse(encoder)
		encodeError    = EncodeGetOneByUIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getOneByUID")
		ctx = context.WithValue(ctx, goa.ServiceKey, "subscription")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteOneByUIDHandler configures the mux to serve the "subscription"
// service "deleteOneByUID" endpoint.
func MountDeleteOneByUIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/subscriptions/{uid}", f)
}

// NewDeleteOneByUIDHandler creates a HTTP handler which loads the HTTP request
// and calls the "subscription" service "deleteOneByUID" endpoint.
func NewDeleteOneByUIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteOneByUIDRequest(mux, decoder)
		encodeResponse = EncodeDeleteOneByUIDResponse(encoder)
		encodeError    = EncodeDeleteOneByUIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteOneByUID")
		ctx = context.WithValue(ctx, goa.ServiceKey, "subscription")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateOneHandler configures the mux to serve the "subscription" service
// "createOne" endpoint.
func MountCreateOneHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/subscriptions", f)
}

// NewCreateOneHandler creates a HTTP handler which loads the HTTP request and
// calls the "subscription" service "createOne" endpoint.
func NewCreateOneHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateOneRequest(mux, decoder)
		encodeResponse = EncodeCreateOneResponse(encoder)
		encodeError    = EncodeCreateOneError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createOne")
		ctx = context.WithValue(ctx, goa.ServiceKey, "subscription")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// Code generated by goa v3.13.1, DO NOT EDIT.
//
// subscription client HTTP transport
//
// Command:
// $ goa gen github.com/tomchan123/go-news-mailer/internal/design --output
// ./internal

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the subscription service endpoint HTTP clients.
type Client struct {
	// GetAll Doer is the HTTP client used to make requests to the getAll endpoint.
	GetAllDoer goahttp.Doer

	// GetOneByUID Doer is the HTTP client used to make requests to the getOneByUID
	// endpoint.
	GetOneByUIDDoer goahttp.Doer

	// DeleteOneByUID Doer is the HTTP client used to make requests to the
	// deleteOneByUID endpoint.
	DeleteOneByUIDDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the subscription service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetAllDoer:          doer,
		GetOneByUIDDoer:     doer,
		DeleteOneByUIDDoer:  doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// GetAll returns an endpoint that makes HTTP requests to the subscription
// service getAll server.
func (c *Client) GetAll() goa.Endpoint {
	var (
		decodeResponse = DecodeGetAllResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetAllRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAllDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("subscription", "getAll", err)
		}
		return decodeResponse(resp)
	}
}

// GetOneByUID returns an endpoint that makes HTTP requests to the subscription
// service getOneByUID server.
func (c *Client) GetOneByUID() goa.Endpoint {
	var (
		decodeResponse = DecodeGetOneByUIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetOneByUIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOneByUIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("subscription", "getOneByUID", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteOneByUID returns an endpoint that makes HTTP requests to the
// subscription service deleteOneByUID server.
func (c *Client) DeleteOneByUID() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteOneByUIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteOneByUIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteOneByUIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("subscription", "deleteOneByUID", err)
		}
		return decodeResponse(resp)
	}
}

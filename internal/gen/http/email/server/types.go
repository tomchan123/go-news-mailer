// Code generated by goa v3.13.1, DO NOT EDIT.
//
// email HTTP server types
//
// Command:
// $ goa gen github.com/tomchan123/go-news-mailer/internal/design --output
// ./internal

package server

import (
	email "github.com/tomchan123/go-news-mailer/internal/gen/email"
	goa "goa.design/goa/v3/pkg"
)

// SendOneEmailRequestBody is the type of the "email" service "sendOneEmail"
// endpoint HTTP request body.
type SendOneEmailRequestBody struct {
	// Unique identifier of subcription
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Subscribed email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Name of the subscriber
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Datetime when the subscription was made
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
}

// SendOneEmailSubscriptionFieldMissingResponseBody is the type of the "email"
// service "sendOneEmail" endpoint HTTP response body for the
// "SubscriptionFieldMissing" error.
type SendOneEmailSubscriptionFieldMissingResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendOneEmailServerErrorResponseBody is the type of the "email" service
// "sendOneEmail" endpoint HTTP response body for the "ServerError" error.
type SendOneEmailServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewSendOneEmailSubscriptionFieldMissingResponseBody builds the HTTP response
// body from the result of the "sendOneEmail" endpoint of the "email" service.
func NewSendOneEmailSubscriptionFieldMissingResponseBody(res *goa.ServiceError) *SendOneEmailSubscriptionFieldMissingResponseBody {
	body := &SendOneEmailSubscriptionFieldMissingResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendOneEmailServerErrorResponseBody builds the HTTP response body from
// the result of the "sendOneEmail" endpoint of the "email" service.
func NewSendOneEmailServerErrorResponseBody(res *goa.ServiceError) *SendOneEmailServerErrorResponseBody {
	body := &SendOneEmailServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendOneEmailSubscriptionSendOneEmailPayload builds a email service
// sendOneEmail endpoint payload.
func NewSendOneEmailSubscriptionSendOneEmailPayload(body *SendOneEmailRequestBody) *email.SubscriptionSendOneEmailPayload {
	v := &email.SubscriptionSendOneEmailPayload{
		UID:       body.UID,
		Email:     *body.Email,
		Name:      body.Name,
		CreatedAt: body.CreatedAt,
	}

	return v
}

// ValidateSendOneEmailRequestBody runs the validations defined on
// SendOneEmailRequestBody
func ValidateSendOneEmailRequestBody(body *SendOneEmailRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

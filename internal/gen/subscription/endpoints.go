// Code generated by goa v3.13.1, DO NOT EDIT.
//
// subscription endpoints
//
// Command:
// $ goa gen github.com/tomchan123/go-news-mailer/internal/design --output
// ./internal

package subscription

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "subscription" service endpoints.
type Endpoints struct {
	GetAll         goa.Endpoint
	GetOneByUID    goa.Endpoint
	DeleteOneByUID goa.Endpoint
	CreateOne      goa.Endpoint
}

// NewEndpoints wraps the methods of the "subscription" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetAll:         NewGetAllEndpoint(s),
		GetOneByUID:    NewGetOneByUIDEndpoint(s),
		DeleteOneByUID: NewDeleteOneByUIDEndpoint(s),
		CreateOne:      NewCreateOneEndpoint(s),
	}
}

// Use applies the given middleware to all the "subscription" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetAll = m(e.GetAll)
	e.GetOneByUID = m(e.GetOneByUID)
	e.DeleteOneByUID = m(e.DeleteOneByUID)
	e.CreateOne = m(e.CreateOne)
}

// NewGetAllEndpoint returns an endpoint function that calls the method
// "getAll" of service "subscription".
func NewGetAllEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.GetAll(ctx)
	}
}

// NewGetOneByUIDEndpoint returns an endpoint function that calls the method
// "getOneByUID" of service "subscription".
func NewGetOneByUIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(string)
		return s.GetOneByUID(ctx, p)
	}
}

// NewDeleteOneByUIDEndpoint returns an endpoint function that calls the method
// "deleteOneByUID" of service "subscription".
func NewDeleteOneByUIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(string)
		return nil, s.DeleteOneByUID(ctx, p)
	}
}

// NewCreateOneEndpoint returns an endpoint function that calls the method
// "createOne" of service "subscription".
func NewCreateOneEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SubscriptionCreateOnePayload)
		return s.CreateOne(ctx, p)
	}
}
